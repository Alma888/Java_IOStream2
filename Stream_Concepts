1、FileInputStream   读文件               FileOutputStream  写文件
        当read()! = -1时，就可以继续读
        涉及字符集String时，引入（buffer，off，len ，"UTF-8"）;
2、不同的源：（表现出来都是流）
    FileInputStream             源是文件内容
    ByteArrayInputStream   源是内存中的一个段byte[]


进程被启动的时候，默认都带有三个流：
（1）标准输入   System.in   键盘
（2）标准输出   System.out  屏幕
（3）标准错误  System.err  屏幕

3、IO关键的东西
   （1）输入源和最终的输出都是字节形式的（二进制形式）
   （2）路径： 相对路径/绝对路径    ***
   （3）流的分类：
                  文件流/网络流
                  字节流    InputStream / OutputStream
                  字符流    Reader / Writer

4、关于IO中的缓冲（buffer）
        缓存（cache）    VS         缓冲（buffer）---------->两者都是为了提高速度
         读为主                               读写都可能，IO            flush操作


      （1）flush操作的策略：
          （A）行缓冲      \n  自动flush
          （B）块缓冲      4k  自动flush
          （C）定时缓冲  1s  自动flush

               不是每次  read   都会从硬盘往内存读（看上方图）
               不是每次   write  都会从内存写回硬盘（看上方图）

      （2）IO设备都是  有开就有关
                   流：   close();  隐含着flush操作

      （3）了解：
       try  with  resourse
       try (InputStream is=new FileInputStream("你好")){
                //正常操作
       }
      （走到这里）无论正常还是异常，自动调用is.close();


      （4）总结
             （1）流：（流是用来专门处理一个内容的）
                        四个接口：
                           InputStream / OutputStream    字节流（二进制形式的数据）
                           Reader / Writer                         字符流（文本）
                           Buffered相关的（BufferedReader、BufferedWriter）  缓冲相关的
             （2）路径：相对路径+绝对路径


——————————————————————------——————————————————————————
——————————————————————字节流——————————————————————————
——————————————————————------——————————————————————————

    字节流是所有流的基础，也是其他高级流的前提。
答案：字节流处理的是计算机最基本的单位byte ，它可以处理任何数据格式的数据。
只不过，在处理具体数据格式的时候，效率没有具体的实现类高，如：字符格式、对象格式等。
主要的操作对象就是 byte数组，通过 read()和write()方法把byte数组中的数据读出或写入。


1、流的概念：在 Java中所有数据都是使用流读写的。流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在两设备间的传输称为流，流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。
          1.按照流向分：输入流；输出流
          2.按照处理数据的单位分：字节流(8位的字节)；字符流(16位的字节)

2、流的分类
       基础字节输入流和输出流的类为：InputStream 和 OutputStream。
      通过它们再衍生出 FileInputStream 和 FileOutputStream、
                               ObjectInputStream 和 ObjectOutputStream、
                           BufferedInputStream  和 BufferedOutputStream等。


3、如何使用字节流
    （1）字节流最大的特点，就是每次输出和输入都是一个字节。因此，它主要应用在最开始的流的处理上，如：内存缓存操作、文件复制等不需要关心流的内容是什么格式的地方。
         【使用单纯的InputStream和OutputStream实现文件复制】
              package Stream;

              import java.io.*;

              //文件复制的示例程序(不需要关心流的内容是什么格式)
              //使用单纯的InputStream 和 OutputStream
              public class FileCopy {
                  public static void main(String[] args) throws IOException {
                      //生成输入文件的输入流对象，字节流
                      InputStream in=new FileInputStream("d:/test/a.txt");
                      //生成输出文件的输出流对象，字节流
                      OutputStream out=new FileOutputStream("d:/test/b.txt");
                      byte[] buff=new byte[256];
                      int len=0;
                      //循环读取到 buff中，如果文件到底，则读取数据的长度为-1
                      while ((len=in.read(buff))!=-1){
                          out.write(buff);
                      }
                      in.close();
                      out.close();
                  }
              }

    （2）字节缓冲流 BufferedInputStream 和 BufferedOutputStream
         【为什么需要有缓冲流】？
         答：当我们用read()读取文件时，每读一个字节，访问一次硬盘效率很低 。文件过大时，操作起来也不是很方便。
             因此我们需要用到buffer缓存流，当创建buffer对象时，会创建一个缓冲区数组。当我们读一个文件时，
             先从硬盘中读到缓冲区，然后直接从缓冲区输出即可，效率会更高。

         【使用 BufferedInputStream 和 BufferedOutputStream实现文件拷贝】
              package Stream;

              import java.io.*;
              //使用 BufferedInputStream 和 BufferedOutputStream实现文件拷贝
              public class TestBufferStreamCopy {
                  public static void main(String[] args)throws IOException {
                      File file=new File("demo.txt");
                      if(!file.isFile()){
                          return;
                      }
                      BufferedInputStream bfis=new BufferedInputStream(new FileInputStream(file));
                      BufferedOutputStream bfos=new BufferedOutputStream(new
                              FileOutputStream("src\\"+file.getName()));//copy到src目录下
                      byte[] buff=new byte[1024];
                      int temp=0; //边读边写
                      while ((temp=bfis.read(buff))!=-1){//读
                          bfos.write(buff);           //写
                      }
                      bfos.flush();
                      bfis.close();
                      bfos.close();
                      System.out.println("copy成功！");
                  }
              }

       总结：上面的两段代码，第一个没有使用缓冲流，是直接从硬盘往内存读；
           第二个使用了缓冲流，是事先将数据读入了缓冲区，之后直接从缓冲区
           往出读。因此相比之下，第二段代码效率更高一些。

     read() 和 write()方法，是字节流的主要使用方法，它们的处理目标通常是一个byte 数组，
     也就是把这些byte 写入或读出。


——————————————————————------——————————————————————————
——————————————————————字符流——————————————————————————
——————————————————————------——————————————————————————


1、字符流概念
       字符流是由字节流包装而来，它的输入和输出流类型包括StringReader和StringWriter、
       BufferedReader和BufferedWriter。对于前者，它们的使用方法与字节流类似，主要还是
       read() 和 write() 方法，而后者除了基本的read()和write()以外，有一个功能是在读取
       文章类型的文本文件时经常需要的，那就是readLine()方法。

2、字符流FileReader 和 FileWriter
      public class FileReader extends InputStreamReader
      如果要从文件中读取内容，可以直接使用 FileReader 子类。
           FileReader 是用于读取字符流。 要读取原始字节流，请考虑使用
           FileInputStream 。

      public class FileWriter extends OutputStreamWriter
      如果是向文件中写入内容，应该使用FileWriter 子类
       FileWriter 是用于写入字符流。 要编写原始字节流，请考虑使用 FileOutputStream。

        【使用FileReader 和 FileWriter复制文件】
              package Stream;

              import java.io.FileReader;
              import java.io.FileWriter;
              import java.io.IOException;

              //使用 FileReader 和 FileWriter 复制文件：
              public class TestFilewriterCopy {
                  public static void main(String[] args)throws IOException {
                      //创建输入流对象
                      FileReader fr=new FileReader("D:\\a.txt");

                      //创建输出流对象
                      FileWriter fw=new FileWriter("D:\\b.txt");
                      //读写数据
                      int ch;
                      while ((ch=fr.read())!=-1){
                          fw.write(ch);
                      }
                      //释放资源
                      fw.close();
                      fr.close();
                  }
              }



3、字符缓冲流BufferedReader 和BufferedWriter

为了提高字符流读写的效率，引入了缓冲机制，进行字符批量的读写，提高了单个字符读写的效率。
BufferedReader 用于加快读取字符的速度， BufferedWriter 用于加快写入的速度。

BufferedReader 和 BufferedWriter 类各拥有 8192个 字符的缓冲区。当 BufferedReader在 读取文
本文件时，会先尽量从文件中读入字符数据并放满缓冲区，而之后若使用read()方法，会先从缓冲区中进行读取。如果缓冲区数据不足，才会再从文件中读取，使用 BufferedWriter 时，写入的数据并不会先输出到目的地，而是先存储至缓冲区中。如果缓冲区中的数据满了，才会一次对目的地进行写出。

      public class BufferedReader extends Reader
      从字符输入流读取文本，缓冲字符，以提供字符，数组和行的高效读取。

      public class BufferedWriter extends Writer

      【使用BufferedReader 和 BufferedWriter进行文件拷贝】
              package Stream;
              //缓冲字符流示例
              import java.io.*;

              public class TestBufferwriterCopy {
                  public static void main(String[] args) throws IOException {
                      BufferedReader bReader=new BufferedReader(new FileReader("D:\\a.txt"));

                      BufferedWriter bWriter=new BufferedWriter(new FileWriter("D:\\b.txt"));
                      String content=" ";
                      //readLine一行一行的读取
                      while ((content=bReader.readLine())!=null){
                          //\r\n换行
                          bWriter.write(content+"\r\n");
                      }
                      // * 关闭流的顺序：
                      //  * 当A依赖B的时候先关闭A，再关闭B
                      //  * 带缓冲的流最后关闭的时候会执行一次flush

                      bReader.close();
                      bWriter.close();
                  }
              }


4、字节流对比字符流
         1、字节流操作的基本单元是字节；字符流操作的基本单元为Unicode码元。
         2、字节流在操作的时候本身不会用到缓冲区的，是与文件本身直接操作的；
            而字符流在操作的时候使用到缓冲区的。
         3、所有文件的存储都是字节(byte)的存储，在磁盘上保留的是字节。
         4、在使用字节流操作中，即使没有关闭资源（close方法），也能输出；
             而字符流不使用close方法的话，不会输出任何内容。












